if(statut == "cadre")
net_salary <- salary * (1-0.22)
return (net_salary)
if(statut == "non-cadres")
net_salary <- salary * (1-0.25)
return(net_salary)
}
print(brutToNet2(3000,"cadre"))
print(brutToNet2(3000,"non-cadres"))
net_salary_2 <- salary * (1-0.25)
brutToNet2 <- function(salary,statut) {
if(!(statut == "cadre" || statut == "non-cadres")) {
return("ERROR : contract unknown")
}
if(statut == "cadre")
net_salary <- salary * (1-0.22)
return (net_salary)
if(statut == "non-cadres")
net_salary_2 <- salary * (1-0.25)
return(net_salary_2)
}
print(brutToNet2(3000,"non-cadres"))
}
if(statut == "non-cadres"){
net_salary_2 <- salary * (1-0.25)
return(net_salary_2)
}
print(brutToNet2(3000,"non-cadres"))
brutToNet2 <- function(salary,statut) {
if(!(statut == "cadre" || statut == "non-cadres")) {
return("ERROR : contract unknown")
}
if(statut == "cadre"){
net_salary <- salary * (1-0.22)
return (net_salary)}
if(statut == "non-cadres"){
net_salary <- salary * (1-0.25)
return(net_salary)}
}
print(brutToNet2(3000,"non-cadres"))
print(brutToNet2(3000,"cadres"))
print(brutToNet2(3000,"cadre"))
shiny::runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') # importation des données du site internet sur Rstudio
df <- fromJSON(rawToChar(raw_data$content), flatten = TRUE) # Conversion des données en bloc de données
#Geocodage
#reverse <- df %>%
#reverse_geocode(lat = position.latitude, long = position.longitude, method = 'osm',
#address = address, full_results = TRUE)
#reverse <- data.frame(df$`reverse$postcode`)
#reverse <- cbind(reverse,df$number)
#Faire fichier CSV geocodage
#write.csv2(reverse, file = "geocodage.csv")
#Lecture du fichier CSV
geocode_csv <- read.csv2(file = "geocodage.csv", sep = ";",header = TRUE)
setwd("C:/Users/elect/OneDrive/Documents/test")
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') # importation des données du site internet sur Rstudio
df <- fromJSON(rawToChar(raw_data$content), flatten = TRUE) # Conversion des données en bloc de données
#Geocodage
#reverse <- df %>%
#reverse_geocode(lat = position.latitude, long = position.longitude, method = 'osm',
#address = address, full_results = TRUE)
#reverse <- data.frame(df$`reverse$postcode`)
#reverse <- cbind(reverse,df$number)
#Faire fichier CSV geocodage
#write.csv2(reverse, file = "geocodage.csv")
#Lecture du fichier CSV
geocode_csv <- read.csv2(file = "geocodage.csv", sep = ";",header = TRUE)
geocode <- unique(geocode_csv$df..reverse.postcode.)
geocode <- c(geocode_csv$df..reverse.postcode.)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
source('~/login/app.R')
runApp()
source('~/login/app.R')
runApp()
runApp()
runApp()
shiny::runApp('~/login')
runApp('~/login')
runApp()
runApp()
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
runApp('~/login')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') # importation des données du site internet sur Rstudio
df <- fromJSON(rawToChar(raw_data$content), flatten = TRUE) # Conversion des données en bloc de données
#Geocodage
#reverse <- df %>%
#reverse_geocode(lat = position.latitude, long = position.longitude, method = 'osm',
#address = address, full_results = TRUE)
#reverse <- data.frame(df$`reverse$postcode`)
#reverse <- cbind(reverse,df$number)
#Faire fichier CSV geocodage
#write.csv2(reverse, file = "geocodage.csv")
#Lecture du fichier CSV
geocode_csv <- read.csv2(file = "geocodage.csv", sep = ";",header = TRUE)
geocode <- geocode_csv$df..reverse.postcode.
df <- cbind(df, geocode)
View(df)
df$geocode
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?HTML
?HTML
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') # importation des données du site internet sur Rstudio
df <- fromJSON(rawToChar(raw_data$content), flatten = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
refreshData <- function() {
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50')
df <- fromJSON(rawToChar(raw_data$content), flatten = TRUE)
return(df)
}
refreshData()
View(refreshData())
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50')
df <- fromJSON(rawToChar(raw_data$content), flatten = TRUE)
f <- df
View(f)
runApp()
output$mymap <- renderLeaflet({
if ("Tous" %in% input$postcode) {
filtered_data <- df
} else {
filtered_data <- df %>%
filter(geocode %in% input$postcode)
}
if ("Tous" %in% input$statusfilter) {
filtered_data <- filtered_data
} else {
filtered_data <- filtered_data %>%
filter(status %in% input$statusfilter)
}
leaflet() %>%
setView(lng = 4.835659, lat = 45.764043, zoom = 11) %>%
addTiles() %>%
addCircleMarkers(
lng = filtered_data$position.longitude,
lat = filtered_data$position.latitude,
radius = 10,
fillOpacity = 0.7,
stroke = FALSE,
popup = paste(
div(class = "map", "Nom de la Station : "), filtered_data$name,
div(class = "map", "Nombre de vélos disponibles : "), filtered_data$totalStands.availabilities.bikes,
div(class = "map", "Nombre de places disponibles : "), filtered_data$totalStands.availabilities.stands,
div(class = "map", "Station ouverte ? : "), filtered_data$status
),
clusterOptions = markerClusterOptions()
)
})
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("httr","jsonlite"))
library(httr)
library(jsonlite)
raw_data <-  GET('https://api.jcdecaux.com/vls/v1/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') #importation des données du site internet sur Rstudio
df <- fromJSON ( rawToChar ( raw_data$content ) , flatten =  TRUE ) #Conversion des données en bloc de données
install.packages("RMySQL")
raw_data <-  GET('https://api.jcdecaux.com/vls/v1/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') #importation des données du site internet sur Rstudio
install.packages(c("httr","jsonlite"))
library(httr)
library(jsonlite)
raw_data <-  GET('https://api.jcdecaux.com/vls/v1/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50') #importation des données du site internet sur Rstudio
df <- fromJSON ( rawToChar ( raw_data$content ) , flatten =  TRUE ) #Conversion des données en bloc de données
str(df)
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50')
df <- fromJSON ( rawToChar ( raw_data$content ) , flatten =  TRUE ) #Conversion des données en bloc de données
str(df)
summary(df)
View(df)
# Créez une table pour les données générales
df_general <- df %>%
select(id, contractName, name, address, banking, bonus, status, lastUpdate, connected, overflow)
df_position <- df %>%
select(id, position.latitude, position.longitude)
install.packages(c("httr","jsonlite"))
library(httr)
library(jsonlite)
install.packages("dplyr")
if (!require(httr)) {
install.packages("httr")
}
if (!require(jsonlite)) {
install.packages("jsonlite")
}
if (!require(dplyr)) {
install.packages("dplyr")
}
if (!require(DBI)) {
install.packages("DBI")
}
if (!require(RMySQL)) {
install.packages("RMySQL")
}
library(httr)
library(jsonlite)
library(dplyr)
library(DBI)
library(RMySQL)
raw_data <- GET('https://api.jcdecaux.com/vls/v3/stations?contract=Lyon&apiKey=fc41d1b1016a6b95f0f755048a0690a80719ab50')
df <- fromJSON ( rawToChar ( raw_data$content ) , flatten =  TRUE ) #Conversion des données en bloc de données
# Créez une table pour les données générales
df_general <- df %>%
select(id, contractName, name, address, banking, bonus, status, lastUpdate, connected, overflow)
geocode_csv <- read.csv2(file = "geocodage.csv", sep = ";",header = TRUE)
geocode <- geocode_csv$df..reverse.postcode.
df <- cbind(df, geocode)
df_general <- df %>%
select(number, contractName, name, address, banking, bonus, status, lastUpdate, connected, overflow)
# Créez une table pour les informations de position
df_position <- df %>%
select(number, position.latitude, position.longitude)
# Créez une table pour les informations sur les stands
df_totalStands <- df %>%
select(number, totalStands.capacity, totalStands.availabilities.bikes, totalStands.availabilities.stands, totalStands.availabilities.mechanicalBikes, totalStands.availabilities.electricalBikes, totalStands.availabilities.electricalInternalBatteryBikes, totalStands.availabilities.electricalRemovableBatteryBikes)
df_mainStands <- df %>%
select(number, mainStands.capacity, mainStands.availabilities.bikes, mainStands.availabilities.stands, mainStands.availabilities.mechanicalBikes, mainStands.availabilities.electricalBikes, mainStands.availabilities.electricalInternalBatteryBikes, mainStands.availabilities.electricalRemovableBatteryBikes)
df_overflowStands <- df %>%
select(number, overflowStands.capacity, overflowStands.availabilities.bikes, overflowStands.availabilities.stands, overflowStands.availabilities.mechanicalBikes, overflowStands.availabilities.electricalBikes, overflowStands.availabilities.electricalInternalBatteryBikes, overflowStands.availabilities.electricalRemovableBatteryBikes)
# Créez une table pour les codes postaux
df_codepostaux <- df %>%
select(number,geocode)
shiny::runApp()
runApp()
